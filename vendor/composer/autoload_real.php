<?php

// autoload_real.php @generated by Composer

<<<<<<< Updated upstream
class ComposerAutoloaderInitfed4f9718b9abec2dc354e3325bf00c0
=======
class ComposerAutoloaderInite77a4e0d5d0702d3420decfab66ffff8
>>>>>>> Stashed changes
{
    private static $loader;

    public static function loadClassLoader($class)
    {
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }

    public static function getLoader()
    {
        if (null !== self::$loader) {
            return self::$loader;
        }

<<<<<<< Updated upstream
        spl_autoload_register(array('ComposerAutoloaderInitfed4f9718b9abec2dc354e3325bf00c0', 'loadClassLoader'), true, true);
        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
        spl_autoload_unregister(array('ComposerAutoloaderInitfed4f9718b9abec2dc354e3325bf00c0', 'loadClassLoader'));

        $vendorDir = dirname(__DIR__);
        $baseDir = dirname($vendorDir);
=======
        spl_autoload_register(array('ComposerAutoloaderInite77a4e0d5d0702d3420decfab66ffff8', 'loadClassLoader'), true, true);
        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
        spl_autoload_unregister(array('ComposerAutoloaderInite77a4e0d5d0702d3420decfab66ffff8', 'loadClassLoader'));
>>>>>>> Stashed changes

        $map = require __DIR__ . '/autoload_namespaces.php';
        foreach ($map as $namespace => $path) {
            $loader->set($namespace, $path);
        }

        $map = require __DIR__ . '/autoload_psr4.php';
        foreach ($map as $namespace => $path) {
            $loader->setPsr4($namespace, $path);
        }

        $classMap = require __DIR__ . '/autoload_classmap.php';
        if ($classMap) {
            $loader->addClassMap($classMap);
        }

        $loader->register(true);

        return $loader;
    }
}
<<<<<<< Updated upstream
=======

function composerRequiree77a4e0d5d0702d3420decfab66ffff8($file)
{
    require $file;
}
>>>>>>> Stashed changes
